NAME
    Catalyst - The Elegant MVC Web Application Framework

SYNOPSIS
        # use the helper to start a new application
        catalyst.pl MyApp
        cd MyApp

        # add models, views, controllers
        script/myapp_create.pl model Something
        script/myapp_create.pl view Stuff
        script/myapp_create.pl controller Yada

        # built in testserver
        script/myapp_server.pl

        # command line interface
        script/myapp_test.pl /yada

        use Catalyst;

        use Catalyst qw/My::Module My::OtherModule/;

        use Catalyst '-Debug';

        use Catalyst qw/-Debug -Engine=CGI/;

        sub default : Private { $_[1]->res->output('Hello') } );

        sub index : Path('/index.html') {
            my ( $self, $c ) = @_;
            $c->res->output('Hello');
            $c->forward('foo');
        }

        sub product : Regex('^product[_]*(\d*).html$') {
            my ( $self, $c ) = @_;
            $c->stash->{template} = 'product.tt';
            $c->stash->{product} = $c->req->snippets->[0];
        }

    See also Catalyst::Manual::Intro

DESCRIPTION
    The key concept of Catalyst is DRY (Don't Repeat Yourself).

    See Catalyst::Manual for more documentation.

    Catalyst plugins can be loaded by naming them as arguments to the "use
    Catalyst" statement. Omit the "Catalyst::Plugin::" prefix from the
    plugin name, so "Catalyst::Plugin::My::Module" becomes "My::Module".

        use Catalyst 'My::Module';

    Special flags like -Debug and -Engine can also be specifed as arguments
    when Catalyst is loaded:

        use Catalyst qw/-Debug My::Module/;

    The position of plugins and flags in the chain is important, because
    they are loaded in exactly the order that they appear.

    The following flags are supported:

    -Debug
        enables debug output, i.e.:

            use Catalyst '-Debug';

        this is equivalent to:

            use Catalyst;
            sub debug { 1 }

    -Engine
        Force Catalyst to use a specific engine. Omit the
        "Catalyst::Engine::" prefix of the engine name, i.e.:

            use Catalyst '-Engine=CGI';

METHODS
    debug
        Overload to enable debug messages.

    config
        Returns a hashref containing your applications settings.

    $c->engine
        Contains the engine class.

    $c->log
        Contains the logging object. Unless it is already set Catalyst sets
        this up with a "Catalyst::Log" object. To use your own log class:

            $c->log( MyLogger->new );
            $c->log->info("now logging with my own logger!");

        Your log class should implement the methods described in the
        "Catalyst::Log" man page.

    $c->plugin( $name, $class, @args )
        Instant plugins for Catalyst. Classdata accessor/mutator will be
        created, class loaded and instantiated.

            MyApp->plugin( 'prototype', 'HTML::Prototype' );

            $c->prototype->define_javascript_functions;

CASE SENSITIVITY
    By default Catalyst is not case sensitive, so "MyApp::C::FOO::Bar"
    becomes "/foo/bar".

    But you can activate case sensitivity with a config parameter.

        MyApp->config->{case_sensitive} = 1;

LIMITATIONS
    mod_perl2 support is considered experimental and may contain bugs.

SUPPORT
    IRC:

        Join #catalyst on irc.perl.org.

    Mailing-Lists:

        http://lists.rawmode.org/mailman/listinfo/catalyst
        http://lists.rawmode.org/mailman/listinfo/catalyst-dev

    Web:

        http://catalyst.perl.org

SEE ALSO
    Catalyst::Manual - The Catalyst Manual
    Catalyst::Engine - Core Engine
    Catalyst::Log - The Log Class.
    Catalyst::Request - The Request Object
    Catalyst::Response - The Response Object
    Catalyst::Test - The test suite.

AUTHOR
    Sebastian Riedel, "sri@oook.de"

THANK YOU
    Andy Grundman, Andrew Ford, Andrew Ruthven, Autrijus Tang, Christian
    Hansen, Christopher Hicks, Dan Sully, Danijel Milicevic, David Naughton,
    Gary Ashton Jones, Geoff Richards, Jesse Sheidlower, Jody Belka, Johan
    Lindstrom, Juan Camacho, Leon Brocard, Marcus Ramberg, Tatsuhiko
    Miyagawa and all the others who've helped.

LICENSE
    This library is free software . You can redistribute it and/or modify it
    under the same terms as perl itself.

